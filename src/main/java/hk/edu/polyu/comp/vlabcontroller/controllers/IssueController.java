package hk.edu.polyu.comp.vlabcontroller.controllers;

import hk.edu.polyu.comp.vlabcontroller.auth.IAuthenticationBackend;
import hk.edu.polyu.comp.vlabcontroller.model.runtime.Proxy;
import hk.edu.polyu.comp.vlabcontroller.service.LogService;
import hk.edu.polyu.comp.vlabcontroller.service.ProxyService;
import hk.edu.polyu.comp.vlabcontroller.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.core.env.Environment;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.mail.internet.MimeMessage;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.File;

@Controller
public class IssueController extends BaseController {

    final LogService logService;

    JavaMailSender mailSender;

    @Autowired(required = false)
    public void setMailSender(JavaMailSender mailSender) {
        this.mailSender = mailSender;
    }

    protected IssueController(ProxyService proxyService, UserService userService, Environment environment, @Lazy IAuthenticationBackend authenticationBackend, LogService logService) {
        super(proxyService, userService, environment, authenticationBackend);
        this.logService = logService;
    }


    @RequestMapping(value = "/issue", method = RequestMethod.POST)
    public String postIssue(HttpServletRequest request, HttpServletResponse response) {
        IssueForm form = new IssueForm();
        form.setUserName(getUserName(request));
        form.setCurrentLocation(request.getParameter("currentLocation"));
        form.setAppName(getAppName(form.getCurrentLocation()));
        form.setCustomMessage(request.getParameter("customMessage"));

        Proxy activeProxy = null;
        for (Proxy proxy : proxyService.getProxies(null, false)) {
            if (proxy.getUserId().equals(form.getUserName()) && proxy.getSpec().getId().equals(form.getAppName())) {
                activeProxy = proxy;
                break;
            }
        }
        sendSupportMail(form, activeProxy);

        //TODO Redirect to current location
        return "redirect:" + getContextPath();
    }

    public void sendSupportMail(IssueForm form, Proxy proxy) {
        String supportAddress = getSupportAddress();
        if (supportAddress == null) throw new RuntimeException("Cannot send mail: no support address configured");
        if (mailSender == null) throw new RuntimeException("Cannot send mail: no smtp settings configured");

        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true);

            // Headers
            helper.setFrom(environment.getProperty("proxy.support.mail-from-address", "issues@shinyproxy.io"));
            helper.addTo(supportAddress);
            helper.setSubject("ShinyProxy Error Report");

            // Body
            StringBuilder body = new StringBuilder();
            String lineSep = System.getProperty("line.separator");
            body.append(String.format("This is an error report generated by ShinyProxy%s", lineSep));
            body.append(String.format("User: %s%s", form.userName, lineSep));
            if (form.appName != null) body.append(String.format("App: %s%s", form.appName, lineSep));
            if (form.currentLocation != null)
                body.append(String.format("Location: %s%s", form.currentLocation, lineSep));
            if (form.customMessage != null) body.append(String.format("Message: %s%s", form.customMessage, lineSep));

            // Attachments (only if container-logging is enabled)
            if (proxy != null) {
                String[] filePaths = logService.getLogs(proxy);

                if (filePaths != null && filePaths.length > 1) {
                    if (new File(filePaths[0]).exists()) {
                        for (String p : filePaths) {
                            File f = new File(p);
                            helper.addAttachment(f.getName(), f);
                        }
                    } else {
                        body.append(String.format("Log (stdout): %s%s", filePaths[0], lineSep));
                        body.append(String.format("Log (stderr): %s%s", filePaths[1], lineSep));
                    }
                }
            }

            helper.setText(body.toString());
            mailSender.send(message);
        } catch (Exception e) {
            throw new RuntimeException("Failed to send email", e);
        }
    }

    public static class IssueForm {

        private String userName;
        private String appName;
        private String currentLocation;
        private String customMessage;

        public String getUserName() {
            return userName;
        }

        public void setUserName(String userName) {
            this.userName = userName;
        }

        public String getAppName() {
            return appName;
        }

        public void setAppName(String appName) {
            this.appName = appName;
        }

        public String getCurrentLocation() {
            return currentLocation;
        }

        public void setCurrentLocation(String currentLocation) {
            this.currentLocation = currentLocation;
        }

        public String getCustomMessage() {
            return customMessage;
        }

        public void setCustomMessage(String customMessage) {
            this.customMessage = customMessage;
        }
    }
}
